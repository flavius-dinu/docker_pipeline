name: Docker CI/CD Pipeline example

on:
  push:
    branches: ["main"]
    paths:
      - 'images/**'
  pull_request:
    branches: ["main"]
    paths:
      - 'images/**'

env:
  REGISTRY: ghcr.io

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for all branches and tags

      - id: set-matrix
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            # For pull requests, compare against the base branch
            BASE_SHA=$(git merge-base ${{ github.event.pull_request.base.sha }} ${{ github.sha }})
            CHANGED_DIRS=$(git diff --name-only $BASE_SHA ${{ github.sha }} | grep '^images/' | cut -d/ -f2 | sort -u | jq -R -s -c 'split("\n")[:-1]')
          elif [ "${{ github.event_name }}" == "push" ]; then
            # For pushes, compare against the previous commit
            CHANGED_DIRS=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep '^images/' | cut -d/ -f2 | sort -u | jq -R -s -c 'split("\n")[:-1]')
          else
            # Fallback: consider all directories changed
            CHANGED_DIRS=$(find images -maxdepth 1 -type d | cut -d/ -f2 | jq -R -s -c 'split("\n")[1:-1]')
          fi

          # If no changes detected, consider all directories
          if [ "$CHANGED_DIRS" == "[]" ] || [ -z "$CHANGED_DIRS" ]; then
            CHANGED_DIRS=$(find images -maxdepth 1 -type d | cut -d/ -f2 | jq -R -s -c 'split("\n")[1:-1]')
          fi

          echo "matrix=${CHANGED_DIRS}" >> $GITHUB_OUTPUT
        shell: bash

  build-and-push:
    needs: detect-changes
    runs-on: ubuntu-latest
    if: ${{ needs.detect-changes.outputs.matrix != '[]' && needs.detect-changes.outputs.matrix != '' }}
    strategy:
      matrix:
        image: ${{fromJson(needs.detect-changes.outputs.matrix)}}
    permissions:
      contents: read
      packages: write
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to the Container registry
        if: github.event_name == 'push'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.image }}
          tags: |
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./images/${{ matrix.image }}
          push: ${{ github.event_name == 'push' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          load: true  # Always load the image locally

      - name: Debug Docker images
        run: |
          echo "Available tags: ${{ steps.meta.outputs.tags }}"
          echo "Listing all Docker images:"
          docker images
          echo "Inspecting built image:"
          docker inspect ${{ steps.meta.outputs.tags }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.meta.outputs.tags }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          ignore-unfixed: true
        continue-on-error: true

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run container structure tests
        run: |
          # Install container-structure-test
          curl -LO https://storage.googleapis.com/container-structure-test/latest/container-structure-test-linux-amd64
          chmod +x container-structure-test-linux-amd64
          sudo mv container-structure-test-linux-amd64 /usr/local/bin/container-structure-test

          # Set the image reference
          IMAGE_REF="${{ github.event_name == 'push' && format('{0}/{1}/{2}:{3}', env.REGISTRY, github.repository, matrix.image, github.sha) || format('ci-local/{0}:{1}', matrix.image, github.sha) }}"

          # Run the tests
          container-structure-test test --image "$IMAGE_REF" --config ./images/${{ matrix.image }}/structure-tests.yaml

        shell: bash

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Deploy to production
        run: |
          echo "Deploying to production..."